{"version":3,"sources":["components/SetTimer.js","App.js","reportWebVitals.js","index.js"],"names":["SetTimer","props","id","title","toLowerCase","className","onClick","handleDecrease","count","handleIncrease","App","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","audioBeep","play","handleReset","pause","currentTime","format_time","minutes","Math","floor","seconds","change_time","timerType","newCount","undefined","this","breakProps","sessionProps","preload","ref","audio","src","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caaa1c9d.chunk.js","sourcesContent":[" const SetTimer = (props) => {\r\n    const id = props.title.toLowerCase();\r\n    \r\n    return (\r\n      <div className=\"timer-container\">\r\n        <h2 id={`${id}-label`}>\r\n          {props.title} Length\r\n        </h2>\r\n        <div className=\"flex actions-wrapper\">\r\n          <button id={`${id}-decrement`} onClick={props.handleDecrease}>\r\n            <i className=\"fas fa-minus\" /> -\r\n          </button>\r\n          \r\n          <span id={`${id}-length`}>{props.count}</span>\r\n          \r\n          <button id={`${id}-increment`} onClick={props.handleIncrease}>\r\n            <i className=\"fas fa-plus\" /> +\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  export default SetTimer\r\n  ","import React,{Component} from \"react\"\r\nimport SetTimer from './components/SetTimer'\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n        state = {\r\n          breakCount: 5,\r\n          sessionCount: 25,\r\n          clockCount: 25 * 60,\r\n          currentTimer: 'Session',\r\n          isPlaying: false\r\n        }\r\n      \r\n        constructor(props) {\r\n          super(props);\r\n          this.loop = undefined;\r\n        }\r\n        \r\n        componentWillUnmount() {\r\n          clearInterval(this.loop);\r\n        }\r\n      \r\n        handlePlayPause = () => {\r\n          const { isPlaying } = this.state;\r\n          \r\n          if(isPlaying) {\r\n            clearInterval(this.loop);\r\n            \r\n            this.setState({\r\n              isPlaying: false\r\n            });\r\n          } else {\r\n            this.setState({\r\n              isPlaying: true\r\n            });\r\n      \r\n            this.loop = setInterval(() => {\r\n              const {clockCount,currentTimer,breakCount,sessionCount} = this.state;\r\n              \r\n              if(clockCount === 0) {\r\n                this.setState({\r\n                  currentTimer: (currentTimer === 'Session') ? 'Break' : 'Session',\r\n                  clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\r\n                });\r\n                \r\n                this.audioBeep .play();\r\n              } else {\r\n                this.setState({\r\n                  clockCount: clockCount - 1\r\n                });\r\n              }\r\n              \r\n            }, 1000);\r\n          }\r\n        }\r\n        \r\n        handleReset = () => {\r\n          this.setState({\r\n            breakCount: 5,\r\n            sessionCount: 25,\r\n            clockCount: 25 * 60,\r\n            currentTimer: 'Session',\r\n            isPlaying: false\r\n          });\r\n          \r\n          clearInterval(this.loop);\r\n          \r\n          this.audioBeep .pause();\r\n          this.audioBeep .currentTime = 0;\r\n        }\r\n      \r\n        format_time = (count) => {\r\n          let minutes = Math.floor(count / 60);\r\n          let seconds = count % 60;\r\n            \r\n          minutes = minutes < 10 ? ('0'+minutes) : minutes;\r\n          seconds = seconds < 10 ? ('0'+seconds) : seconds;\r\n          \r\n          return `${minutes}:${seconds}`;\r\n        }\r\n        \r\n        change_time = (count, timerType) => {\r\n          const {sessionCount,breakCount,isPlaying,currentTimer} = this.state;\r\n          let newCount;\r\n          if(timerType === 'session') {\r\n            newCount = sessionCount + count;\r\n          } else {\r\n            newCount = breakCount + count;\r\n          }\r\n          \r\n          if(newCount > 0 && newCount < 61 && !isPlaying) {\r\n            this.setState({\r\n              [`${timerType}Count`]: newCount\r\n            });\r\n            \r\n            if(currentTimer.toLowerCase() === timerType) {\r\n              this.setState({\r\n                clockCount: newCount * 60\r\n              })\r\n            }\r\n          }\r\n        }\r\n      \r\n        render() {\r\n          const {breakCount,sessionCount,clockCount,currentTimer,isPlaying} = this.state;\r\n          const breakProps = {\r\n            title: 'Break',\r\n            count: breakCount,\r\n            handleDecrease: () => this.change_time(-1, 'break'),\r\n            handleIncrease: () => this.change_time(1, 'break')\r\n          }\r\n          \r\n          const sessionProps = {\r\n            title: 'Session',\r\n            count: sessionCount,\r\n            handleDecrease: () => this.change_time(-1, 'session'),\r\n            handleIncrease: () => this.change_time(1, 'session'),\r\n          }\r\n          \r\n          return (\r\n            <div>\r\n              <div className=\"flex\">\r\n                <SetTimer {...breakProps} />\r\n                <SetTimer {...sessionProps} />\r\n              </div>\r\n              \r\n              <div className=\"clock-container\">\r\n                <h1 id=\"timer-label\">{currentTimer}</h1>\r\n                <span id=\"time-left\">{this.format_time(clockCount)}</span>\r\n                \r\n                \r\n                <div className=\"flex\">\r\n                  <button id=\"start_stop\" onClick={this.handlePlayPause}>\r\n                    <i className={`fas fa-${isPlaying ? 'pause': 'play'}`} />\r\n                  Play/Pause </button>\r\n                  <button id=\"reset\" onClick={this.handleReset}>\r\n                    <i className=\"fas fa-sync\" /> Reset\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n        <audio\r\n          id=\"beep\"\r\n          preload=\"auto\"\r\n          ref={(audio) => {\r\n            this.audioBeep = audio;\r\n          }}\r\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n        />\r\n        </div>);\r\n        }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}